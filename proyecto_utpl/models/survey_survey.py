# -*- coding: utf-8 -*-

from odoo import api, fields, models, _
from odoo.exceptions import UserError, ValidationError


class Survey(models.Model):
    _inherit = 'survey.survey'

    def action_open_import_gltf_wizard(self):
        '''Acción para abrir el asistente de carga de archivos GLTF al formulario'''
        if self.state != 'draft':
            raise ValidationError(u'No puede cambiar el archivo GLTF ya que la encuesta está ya aprobada. Cancele la encuesta actual y vuelvala a borrador para cambiar el archivo GLTF.')
        view_id = self.env.ref('proyecto_utpl.import_file_wizard_form_view').id
        return {
            'type': 'ir.actions.act_window',
            'name': 'Asistente de carga de archivos',
            'view_mode': 'form',
            'res_model': 'import.file.wizard',
            'target': 'new',
            'views': [[view_id, 'form']],
        }

    def action_open(self):
        for survey in self:
            if survey.survey_type == 'subject_test' and not survey.attachment_id:
                raise ValidationError(u'No puede Iniciar la evaluación %s, hasta que suba un archivo GLTF para realidad aumentada.' % survey.title)
        return super(Survey, self).action_open()

    def _create_answer(self, user=False, partner=False, email=False, test_entry=False, check_attempts=True, **additional_vals):
        user_inputs = super(Survey, self)._create_answer(user=user, partner=partner, email=email, test_entry=test_entry, check_attempts=check_attempts, **additional_vals)
        for input in user_inputs:
            if input.survey_id.survey_type == 'subject_test' and user.type_partner == 'student' and input.survey_id.subject_id.id in user.student_subjects_ids.mapped('subject_id').ids:
                student_subject_rel_id = user.student_subjects_ids.filtered(lambda student_subject: student_subject.subject_id.id == input.survey_id.subject_id.id)
                for subject in student_subject_rel_id:
                    subject.write({'subject_scores_ids': [(0, 0, {'response_id': input.id})]})
        return user_inputs

    reference_image = fields.Image(
        "Imagen de referencia",
        help='Imagen de referencia para el objeto GLTF, que se mostrará en el formulario del backend'
        )
    attachment_id = fields.Many2one(
        'ir.attachment',
        'Archivo importado',
        tracking=True,
        readonly=True,
        help='The file generated by edi_format_id when the invoice is posted (and this document is processed).'
        )
    file_name = fields.Char(
        'Nombre del archivo importado',
        readonly=True,
        )
    db_filename = fields.Char(
        'Nombre del archivo BD',
        readonly=True,
        help='Nombre del archivo a guardar en la BD'
        )
    survey_type = fields.Selection(
        [('native', 'Ninguno'),
         ('subject_test', 'Prueba para materia')],
        string='Tipo de evaluación',
        default='native',
    )
    subject_id = fields.Many2one(
        'student.subject',
        string='Materia',
        ondelete='cascade',
        required=True
    )
    gltf_position = fields.Char(
        u'GLTF Posición',
        default='0 0 0',
        help=u'Posición del archivo gltf en el formulario, en el front end.'
    )
    gltf_scale = fields.Char(
        u'GLTF escala',
        default='0.05 0.05 0.05',
        help=u'Escala del archivo gltf en el formulario, en el front end.'
    )
